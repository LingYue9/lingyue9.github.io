<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>翎月的博客</title>
  <icon>https://www.gravatar.com/avatar/76bc7cba0dec51b879a19d3dd460bc34</icon>
  <subtitle>如无必要，勿增实体</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lingyue9.github.io/"/>
  <updated>2020-09-23T15:57:38.394Z</updated>
  <id>https://lingyue9.github.io/</id>
  
  <author>
    <name>翎月</name>
    <email>trial_9@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java反射</title>
    <link href="https://lingyue9.github.io/2019/04/10/Java%E5%8F%8D%E5%B0%84/"/>
    <id>https://lingyue9.github.io/2019/04/10/Java反射/</id>
    <published>2019-04-10T02:30:24.000Z</published>
    <updated>2020-09-23T15:57:38.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>在日常的第三方应用开发过程中，经常会遇到某个类的某个成员变量、方法或是属性是私有的或是只对系统应用开放，这时候就可以利用Java的反射机制通过反射来获取所需的私有成员或是方法。当然，也不是所有的都适合反射，之前就遇到通过反射得到的结果与预期不符。而后阅读源码发现，经过层层调用后在最终返回结果的地方对应用的权限进行了校验，对于没有权限的应用返回值是没有意义的缺省值，否则返回实际值起到保护用户的隐私目的。</p><h2 id="反射机制的相关类"><a href="#反射机制的相关类" class="headerlink" title="反射机制的相关类"></a>反射机制的相关类</h2><p>与Java反射相关的类如下：</p><table><thead><tr><th style="text-align:left">类名</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">Class类</td><td style="text-align:left">代表类的实体，在运行的Java应用程序中表示类和接口</td></tr><tr><td style="text-align:left">Field类</td><td style="text-align:left">代表类的成员变量（类的属性）</td></tr><tr><td style="text-align:left">Method类</td><td style="text-align:left">代表类的方法</td></tr><tr><td style="text-align:left">Constructor类</td><td style="text-align:left">代表类的构造方法</td></tr></tbody></table><h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><p>Class代表类的实体，在运行的Java应用程序中表示类和接口。在这个类中提供了很多有用的方法，这里对他们简单的分类介绍。</p><ul><li>获得类的相关方法</li></ul><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">asSubclass(Class\<u> clazz)</u></td><td style="text-align:left">把传递的类的对象转换成代表其子类的对象</td></tr><tr><td style="text-align:left">Cast</td><td style="text-align:left">把对象转换成代表类或接口的对象</td></tr><tr><td style="text-align:left">getClassLoader()</td><td style="text-align:left">获得类的加载器</td></tr><tr><td style="text-align:left">getClasser()</td><td style="text-align:left">返回一个数组，数组中包含该类中所有公共类和接口类的对象</td></tr><tr><td style="text-align:left">getDeclaredClasses()</td><td style="text-align:left">返回一个数组，数组中包含该类中所有类和接口类的对象</td></tr><tr><td style="text-align:left">forName(String className)</td><td style="text-align:left">根据类名返回类的对象</td></tr><tr><td style="text-align:left">getName()</td><td style="text-align:left">获得类的完整路径名</td></tr><tr><td style="text-align:left">newInstance()</td><td style="text-align:left">创建类的实例</td></tr><tr><td style="text-align:left">getPackage()</td><td style="text-align:left">获得类的包</td></tr><tr><td style="text-align:left">getSimpleName()</td><td style="text-align:left">获得类的名字</td></tr><tr><td style="text-align:left">getSuperclass()</td><td style="text-align:left">获得当前类继承的父类的名字</td></tr><tr><td style="text-align:left">getInterfaces()</td><td style="text-align:left">获得当前类实现的类或接口</td></tr></tbody></table><ul><li>获得类中属性相关的方法</li></ul><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">getField(String name)</td><td style="text-align:left">获得某个公有的属性对象</td></tr><tr><td style="text-align:left">getFields()</td><td style="text-align:left">获得所有公有的属性对象</td></tr><tr><td style="text-align:left">getDeclaredField(String name)</td><td style="text-align:left">获得某个属性对象</td></tr><tr><td style="text-align:left">getDeclaredFields()</td><td style="text-align:left">获得所有属性对象</td></tr></tbody></table><ul><li>获得类中注解相关的方法</li></ul><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">getAnnotation(Class\<a> annotationClass)</a></td><td style="text-align:left">返回该类中与参数类型匹配的公有注解对象</td></tr><tr><td style="text-align:left">getAnnotations()</td><td style="text-align:left">返回该类中所有公有注解对象</td></tr><tr><td style="text-align:left">getDeclaredAnnotation(Class\<a> annotationClass)</a></td><td style="text-align:left">返回该类中与参数类型匹配的所有注解对象</td></tr><tr><td style="text-align:left">getDeclaredAnnotations()</td><td style="text-align:left">返回该类所有注解对象</td></tr></tbody></table><ul><li>获得类中构造器相关的方法</li></ul><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">getConstructor(Class…&lt;?&gt; parameterTypes)</td><td style="text-align:left">获得该类中与参数类型匹配的公有构造方法</td></tr><tr><td style="text-align:left">getConstructors()</td><td style="text-align:left">获得该类的所有公有构造方法</td></tr><tr><td style="text-align:left">getDeclaredConstructor(Class…&lt;?&gt; parameterTypes)</td><td style="text-align:left">获得该类中与参数类型匹配的构造方法</td></tr><tr><td style="text-align:left">getDeclaredConstructors()</td><td style="text-align:left">获得该类所有构造方法</td></tr></tbody></table><ul><li>获得类中方法相关的方法</li></ul><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">getMethod(String name, Class…&lt;?&gt; parameterTypes)</td><td style="text-align:left">获得该类某个公有的方法</td></tr><tr><td style="text-align:left">getMethods()</td><td style="text-align:left">获得该类所有公有的方法</td></tr><tr><td style="text-align:left">getDeclaredMethod(String name, Class…&lt;?&gt; parameterTypes)</td><td style="text-align:left">获得该类某个方法</td></tr><tr><td style="text-align:left">getDeclaredMethods()</td><td style="text-align:left">获得该类所有方法</td></tr></tbody></table><h3 id="Field类"><a href="#Field类" class="headerlink" title="Field类"></a>Field类</h3><p>Field代表类的成员变量（类的属性）。</p><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">eauals(Object obj)</td><td style="text-align:left">属性与obj相等则返回true</td></tr><tr><td style="text-align:left">get(Object obj)</td><td style="text-align:left">获得obj中对应的属性值</td></tr><tr><td style="text-align:left">set(Object obj, Object value)</td><td style="text-align:left">设置obj中对应属性值</td></tr></tbody></table><h3 id="Method类"><a href="#Method类" class="headerlink" title="Method类"></a>Method类</h3><p>Method代表类的方法</p><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">invoke(Object obj, Object… args)</td><td style="text-align:left">传递object对象及参数调用该对象对应的方法</td></tr></tbody></table><h3 id="Constructor类"><a href="#Constructor类" class="headerlink" title="Constructor类"></a>Constructor类</h3><p>Constructor代表类的构造方法</p><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">newInstance(Object… initargs)</td><td style="text-align:left">根据传递的参数创建类的对象</td></tr></tbody></table><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>为了演示反射的使用，首先构造一个与书籍相关的model——Book.java，然后通过反射方法示例创建对象、反射私有构造方法、反射私有属性、反射私有方法，最后给出两个比较复杂的反射示例——获得当前ZenMode和关机Shutdown。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">String</span> TAG = <span class="string">"BookTag"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> author;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Book&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", author='"</span> + author + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Book</span><span class="params">(<span class="keyword">String</span> name, <span class="keyword">String</span> author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(<span class="keyword">String</span> author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">String</span> <span class="title">declaredMethod</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">String</span> <span class="built_in">string</span> = null;</span><br><span class="line">        <span class="keyword">switch</span> (index) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">string</span> = <span class="string">"I am declaredMethod 1 !"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">string</span> = <span class="string">"I am declaredMethod 2 !"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">string</span> = <span class="string">"I am declaredMethod 1 !"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.jianshu.com/p/9be58ee20dee" target="_blank" rel="noopener">https://www.jianshu.com/p/9be58ee20dee</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="https://lingyue9.github.io/2019/03/21/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>https://lingyue9.github.io/2019/03/21/我的第一篇博客文章/</id>
    <published>2019-03-21T02:30:24.000Z</published>
    <updated>2020-09-22T09:11:33.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="制作自己的博客"><a href="#制作自己的博客" class="headerlink" title="制作自己的博客"></a>制作自己的博客</h2><pre><code>使用hexo制作了自己的个人博客，感谢CodeSheep的指导，了解了使用了node.js下使用hexo搭建博客的方法。</code></pre><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://www.codesheep.cn" target="_blank" rel="noopener">www.codesheep.cn</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;制作自己的博客&quot;&gt;&lt;a href=&quot;#制作自己的博客&quot; class=&quot;headerlink&quot; title=&quot;制作自己的博客&quot;&gt;&lt;/a&gt;制作自己的博客&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;使用hexo制作了自己的个人博客，感谢CodeSheep的指导，了解了使用了node
      
    
    </summary>
    
    
  </entry>
  
</feed>
