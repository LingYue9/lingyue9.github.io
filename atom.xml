<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>翎月的博客</title>
  <icon>https://www.gravatar.com/avatar/76bc7cba0dec51b879a19d3dd460bc34</icon>
  <subtitle>如无必要，勿增实体</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lingyue9.github.io/"/>
  <updated>2020-09-23T15:00:20.606Z</updated>
  <id>https://lingyue9.github.io/</id>
  
  <author>
    <name>翎月</name>
    <email>trial_9@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java反射</title>
    <link href="https://lingyue9.github.io/2019/04/10/Java%E5%8F%8D%E5%B0%84/"/>
    <id>https://lingyue9.github.io/2019/04/10/Java反射/</id>
    <published>2019-04-10T02:30:24.000Z</published>
    <updated>2020-09-23T15:00:20.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><pre><code>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</code></pre><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><pre><code>在日常的第三方应用开发过程中，经常会遇到某个类的某个成员变量、方法或是属性是私有的或是只对系统应用开放，这时候就可以利用Java的反射机制通过反射来获取所需的私有成员或是方法。当然，也不是所有的都适合反射，之前就遇到通过反射得到的结果与预期不符。而后阅读源码发现，经过层层调用后在最终返回结果的地方对应用的权限进行了校验，对于没有权限的应用返回值是没有意义的缺省值，否则返回实际值起到保护用户的隐私目的。</code></pre><h2 id="反射机制的相关类"><a href="#反射机制的相关类" class="headerlink" title="反射机制的相关类"></a>反射机制的相关类</h2><pre><code>与Java反射相关的类如下：类名|用途:--|:--Class类|代表类的实体，在运行的Java应用程序中表示类和接口Field类|代表类的成员变量（类的属性）Method类|代表类的方法Constructor类|代表类的构造方法</code></pre><h1 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h1><p>Class代表类的实体，在运行的Java应用程序中表示类和接口。在这个类中提供了很多有用的方法，这里对他们简单的分类介绍。</p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.jianshu.com/p/9be58ee20dee" target="_blank" rel="noopener">https://www.jianshu.com/p/9be58ee20dee</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="https://lingyue9.github.io/2019/03/21/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>https://lingyue9.github.io/2019/03/21/我的第一篇博客文章/</id>
    <published>2019-03-21T02:30:24.000Z</published>
    <updated>2020-09-22T09:11:33.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="制作自己的博客"><a href="#制作自己的博客" class="headerlink" title="制作自己的博客"></a>制作自己的博客</h2><pre><code>使用hexo制作了自己的个人博客，感谢CodeSheep的指导，了解了使用了node.js下使用hexo搭建博客的方法。</code></pre><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://www.codesheep.cn" target="_blank" rel="noopener">www.codesheep.cn</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;制作自己的博客&quot;&gt;&lt;a href=&quot;#制作自己的博客&quot; class=&quot;headerlink&quot; title=&quot;制作自己的博客&quot;&gt;&lt;/a&gt;制作自己的博客&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;使用hexo制作了自己的个人博客，感谢CodeSheep的指导，了解了使用了node
      
    
    </summary>
    
    
  </entry>
  
</feed>
