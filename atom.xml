<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>翎月的博客</title>
  <icon>https://www.gravatar.com/avatar/76bc7cba0dec51b879a19d3dd460bc34</icon>
  <subtitle>如无必要，勿增实体</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lingyue9.github.io/"/>
  <updated>2020-09-26T11:55:24.931Z</updated>
  <id>https://lingyue9.github.io/</id>
  
  <author>
    <name>翎月</name>
    <email>trial_9@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C3P0连接MySQL的一些问题</title>
    <link href="https://lingyue9.github.io/2020/09/21/C3P0%E8%BF%9E%E6%8E%A5MySQL%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>https://lingyue9.github.io/2020/09/21/C3P0连接MySQL的一些问题/</id>
    <published>2020-09-21T02:30:24.000Z</published>
    <updated>2020-09-26T11:55:24.931Z</updated>
    
    <content type="html"><![CDATA[<p>在最近下载了最新版本的MySQL(5.7.31)后，使用C3P0连接MySQL数据库时报错：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">java</span><span class="selector-class">.sql</span><span class="selector-class">.SQLException</span>: <span class="selector-tag">Connections</span> <span class="selector-tag">could</span> <span class="selector-tag">not</span> <span class="selector-tag">be</span> <span class="selector-tag">acquired</span> <span class="selector-tag">from</span> <span class="selector-tag">the</span> <span class="selector-tag">underlying</span> <span class="selector-tag">database</span>!</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>一番查询之后，发现是url需要添加后缀<br>url一般为 jdbc:mysql://localhost:3306/chatnet?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/qq_42183409/article/details/89422142" target="_blank" rel="noopener">https://blog.csdn.net/qq_42183409/article/details/89422142</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在最近下载了最新版本的MySQL(5.7.31)后，使用C3P0连接MySQL数据库时报错：&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.sql&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.SQLException&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;Connections&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;could&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;acquired&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;underlying&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;database&lt;/span&gt;!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring基于XML装配Bean</title>
    <link href="https://lingyue9.github.io/2019/06/07/Spring%E5%9F%BA%E4%BA%8EXML%E8%A3%85%E9%85%8DBean/"/>
    <id>https://lingyue9.github.io/2019/06/07/Spring基于XML装配Bean/</id>
    <published>2019-06-07T09:02:10.000Z</published>
    <updated>2020-09-24T15:27:51.568Z</updated>
    
    <content type="html"><![CDATA[<p>Bean 的装配可以理解为依赖关系注入，Bean 的装配方式也就是 Bean 的依赖注入方式。Spring 容器支持多种形式的 Bean 的装配方式，如基于 XML 的 Bean 装配、基于 Annotation 的 Bean 装配和自动装配等。</p><a id="more"></a><p>Spring 基于 XML 的装配通常采用两种实现方式，即设值注入（Setter Injection）和构造注入（Constructor Injection）。</p><p>在 Spring 实例化 Bean 的过程中，首先会调用默认的构造方法实例化 Bean 对象，然后通过 Java 的反射机制调用 setXxx() 方法进行属性的注入。因此，设值注入要求一个 Bean 的对应类必须满足以下两点要求。</p><ul><li>必须提供一个默认的无参构造方法。</li><li>必须为需要注入的属性提供对应的 setter 方法。</li></ul><h4 id="1-创建-Person-类"><a href="#1-创建-Person-类" class="headerlink" title="1. 创建 Person 类"></a>1. 创建 Person 类</h4><p>在项目 springDemo02 中的 src 目录下，创建一个名称为 cn.lingyue.assembly 的包，在该包下创建一个 Person 类，如下所示。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package cn.lingyue.assembly;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写toString()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person[name="</span> + name + <span class="string">",age="</span> + age + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认无参的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">String</span> name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        super();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，定义了 name 和 age 两个属性，并为其提供了 getter 和 setter 方法，由于要使用构造注入，所以需要提供有参的构造方法。为了能更清楚地看到输出结果，这里还重写了 toString() 方法。</p><h4 id="2-创建-Spring-配置文件"><a href="#2-创建-Spring-配置文件" class="headerlink" title="2. 创建 Spring 配置文件"></a>2. 创建 Spring 配置文件</h4><p>在 cn.lingyue.assembly 包下创建一个名为 applicationContext.xml 的配置文件，如下所示。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 使用设值注入方式装配Person实例 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person1"</span> <span class="attr">class</span>=<span class="string">"cn.lingyue.assembly.Person"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用构造方法装配Person实例 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person2"</span> <span class="attr">class</span>=<span class="string">"cn.lingyue.assembly.Person"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"lisi"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"21"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码中，首先使用了设值注入方式装配 Person 类的实例，其中 \<property> 子元素用于调用 Bean 实例中的 setXxx() 方法完成属性赋值。然后使用了构造方式装配了 Person 类的实例，其中 \<constructor-arg> 元素用于定义构造方法的参数，其属性 index 表示其索引（从 0 开始），value 属性用于设置注入的值。</constructor-arg></property></p><h4 id="3-创建测试类"><a href="#3-创建测试类" class="headerlink" title="3. 创建测试类"></a>3. 创建测试类</h4><p>在 cn.lingyue.assembly 包下创建一个名称为 XmlBeanAssemblyTest 的测试类，编辑后如下所示。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package cn.lingyue.assembly;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlBeanAssemblyTest</span> &#123;</span></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义Spring配置文件路径</span></span><br><span class="line">        <span class="keyword">String</span> xmlPath = <span class="string">"applicationContext.xml"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化Spring容器，加载配置文件，并对bean进行实例化</span></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(xmlPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设值方式输出结果</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(applicationContext.getBean(<span class="string">"person1"</span>));</span><br><span class="line">        <span class="comment">// 构造方式输出结果</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(applicationContext.getBean(<span class="string">"person2"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，分别获取并输出了 id 为 person1 和 person2 的实例。</p><h4 id="4-运行项目并查看结果"><a href="#4-运行项目并查看结果" class="headerlink" title="4. 运行项目并查看结果"></a>4. 运行项目并查看结果</h4><p>使用 JUnit 测试运行 test() 方法，运行成功后，控制台的输出结果如下图。<br><img src="/assets/img/SpringXml.png" alt=" "></p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>《Java核心技术》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Bean 的装配可以理解为依赖关系注入，Bean 的装配方式也就是 Bean 的依赖注入方式。Spring 容器支持多种形式的 Bean 的装配方式，如基于 XML 的 Bean 装配、基于 Annotation 的 Bean 装配和自动装配等。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>IDEA快捷键</title>
    <link href="https://lingyue9.github.io/2019/05/12/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://lingyue9.github.io/2019/05/12/IDEA快捷键/</id>
    <published>2019-05-12T06:30:20.000Z</published>
    <updated>2020-09-27T06:15:40.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近一直再用VS Code进行开发，体积十分轻巧的同时也极大地提升了效率，然而最近学习Spring时，VS Code不能进行XML配置文件的自动补全，譬如\<bean> \</bean>这一属性，遂改用IDEA进行学习，现记录IDEA的快捷键备用。</p><a id="more"></a><h2 id="Ctrl"><a href="#Ctrl" class="headerlink" title="Ctrl"></a>Ctrl</h2><table><thead><tr><th style="text-align:left">快捷键</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left"><strong>Ctrl + Space</strong></td><td style="text-align:left">基础代码补全</td></tr><tr><td style="text-align:left">Ctrl + F</td><td style="text-align:left">在当前文件进行文本查找</td></tr><tr><td style="text-align:left">Ctrl + R</td><td style="text-align:left">在当前文件进行文本替换</td></tr><tr><td style="text-align:left">Ctrl + Y</td><td style="text-align:left">删除光标所在行 或 删除选中的行</td></tr><tr><td style="text-align:left">Ctrl + D</td><td style="text-align:left">复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下</td></tr><tr><td style="text-align:left">Ctrl + W</td><td style="text-align:left">递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围</td></tr><tr><td style="text-align:left">Ctrl + E</td><td style="text-align:left">显示最近打开的文件记录列表</td></tr><tr><td style="text-align:left">Ctrl + N</td><td style="text-align:left">根据输入的类名查找类文件</td></tr><tr><td style="text-align:left">Ctrl + G</td><td style="text-align:left">在当前文件跳转到指定行处</td></tr><tr><td style="text-align:left">Ctrl + P</td><td style="text-align:left">方法参数提示显示</td></tr><tr><td style="text-align:left">Ctrl + Q</td><td style="text-align:left">光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容</td></tr><tr><td style="text-align:left">Ctrl + U</td><td style="text-align:left">前往当前光标所在的方法的父类的方法 / 接口定义</td></tr><tr><td style="text-align:left">Ctrl + B</td><td style="text-align:left">进入光标所在的方法/变量的接口或是定义出，等效于 Ctrl + 左键单击</td></tr><tr><td style="text-align:left">Ctrl + K</td><td style="text-align:left">版本控制提交项目，需要此项目有加入到版本控制才可用</td></tr><tr><td style="text-align:left">Ctrl + T</td><td style="text-align:left">版本控制更新项目，需要此项目有加入到版本控制才可用</td></tr><tr><td style="text-align:left">Ctrl + H</td><td style="text-align:left">显示当前类的层次结构</td></tr><tr><td style="text-align:left">Ctrl + O</td><td style="text-align:left">选择可重写的方法</td></tr><tr><td style="text-align:left">Ctrl + I</td><td style="text-align:left">选择可继承的方法</td></tr><tr><td style="text-align:left">Ctrl + +</td><td style="text-align:left">展开代码</td></tr><tr><td style="text-align:left">Ctrl + -</td><td style="text-align:left">折叠代码</td></tr><tr><td style="text-align:left">Ctrl + /</td><td style="text-align:left">注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号</td></tr><tr><td style="text-align:left">Ctrl + [</td><td style="text-align:left">移动光标到当前所在代码的花括号开始位置</td></tr><tr><td style="text-align:left">Ctrl + ]</td><td style="text-align:left">移动光标到当前所在代码的花括号结束位置</td></tr><tr><td style="text-align:left">Ctrl + F1</td><td style="text-align:left">在光标所在的错误代码出显示错误信息</td></tr><tr><td style="text-align:left">Ctrl + F3</td><td style="text-align:left">调转到所选中的词的下一个引用位置</td></tr><tr><td style="text-align:left">Ctrl + F4</td><td style="text-align:left">关闭当前编辑文件</td></tr><tr><td style="text-align:left">Ctrl + F8</td><td style="text-align:left">在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点</td></tr><tr><td style="text-align:left">Ctrl + F9</td><td style="text-align:left">执行 Make Project 操作</td></tr><tr><td style="text-align:left">Ctrl + F11</td><td style="text-align:left">选中文件 / 文件夹，使用助记符设定 / 取消书签</td></tr><tr><td style="text-align:left">Ctrl + F12</td><td style="text-align:left">弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选</td></tr><tr><td style="text-align:left">Ctrl + Tab</td><td style="text-align:left">编辑窗口切换，如果在切换的过程又加按上delete，则是关闭对应选中的窗口</td></tr><tr><td style="text-align:left">Ctrl + Enter</td><td style="text-align:left">智能分隔行</td></tr><tr><td style="text-align:left">Ctrl + End</td><td style="text-align:left">跳到文件尾</td></tr><tr><td style="text-align:left">Ctrl + Home</td><td style="text-align:left">跳到文件头</td></tr><tr><td style="text-align:left">Ctrl + Delete</td><td style="text-align:left">删除光标后面的单词或是中文句</td></tr><tr><td style="text-align:left">Ctrl + BackSpace</td><td style="text-align:left">删除光标前面的单词或是中文句</td></tr><tr><td style="text-align:left">Ctrl + 1,2,3…9</td><td style="text-align:left">定位到对应数值的书签位置</td></tr><tr><td style="text-align:left">Ctrl + 左键单击</td><td style="text-align:left">在打开的文件标题上，弹出该文件路径</td></tr><tr><td style="text-align:left">Ctrl + 光标定位</td><td style="text-align:left">按 Ctrl 不要松开，会显示光标所在的类信息摘要</td></tr><tr><td style="text-align:left">Ctrl + 左方向键</td><td style="text-align:left">光标跳转到当前单词 / 中文句的左侧开头位置</td></tr><tr><td style="text-align:left">Ctrl + 右方向键</td><td style="text-align:left">光标跳转到当前单词 / 中文句的右侧开头位置</td></tr><tr><td style="text-align:left">Ctrl + 上方向键</td><td style="text-align:left">等效于鼠标滚轮向上效果</td></tr><tr><td style="text-align:left">Ctrl + 下方向键</td><td style="text-align:left">等效于鼠标滚轮向下效果</td></tr></tbody></table><h2 id="Alt"><a href="#Alt" class="headerlink" title="Alt"></a>Alt</h2><table><thead><tr><th style="text-align:left">快捷键</th><th style="text-align:right">用途</th></tr></thead><tbody><tr><td style="text-align:left"><strong>Alt + Enter</strong></td><td style="text-align:right">IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同</td></tr><tr><td style="text-align:left"><strong>Alt + Insert</strong></td><td style="text-align:right">代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等</td></tr><tr><td style="text-align:left">Alt + `</td><td style="text-align:right">显示版本控制常用操作菜单弹出层</td></tr><tr><td style="text-align:left">Alt + Q</td><td style="text-align:right">弹出一个提示，显示当前类的声明 / 上下文信息</td></tr><tr><td style="text-align:left">Alt + F1</td><td style="text-align:right">显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择</td></tr><tr><td style="text-align:left">Alt + F2</td><td style="text-align:right">对于前面页面，显示各类浏览器打开目标选择弹出层</td></tr><tr><td style="text-align:left">Alt + F3</td><td style="text-align:right">选中文本，逐个往下查找相同文本，并高亮显示</td></tr><tr><td style="text-align:left">Alt + F7</td><td style="text-align:right">查找光标所在的方法 / 变量 / 类被调用的地方</td></tr><tr><td style="text-align:left">Alt + F8</td><td style="text-align:right">在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果</td></tr><tr><td style="text-align:left">Alt + Home</td><td style="text-align:right">定位 / 显示到当前文件的 Navigation Bar</td></tr><tr><td style="text-align:left">Alt + 左方向键</td><td style="text-align:right">按左方向切换当前已打开的文件视图</td></tr><tr><td style="text-align:left">Alt + 右方向键</td><td style="text-align:right">按右方向切换当前已打开的文件视图</td></tr><tr><td style="text-align:left">Alt + 上方向键</td><td style="text-align:right">当前光标跳转到当前文件的前一个方法名位置</td></tr><tr><td style="text-align:left">Alt + 下方向键</td><td style="text-align:right">当前光标跳转到当前文件的后一个方法名位置</td></tr><tr><td style="text-align:left">Alt + 1,2,3…9</td><td style="text-align:right">显示对应数值的选项卡，其中 1 是 Project 用得最多</td></tr></tbody></table><h2 id="Shift"><a href="#Shift" class="headerlink" title="Shift"></a>Shift</h2><table><thead><tr><th style="text-align:left">快捷键</th><th style="text-align:right">用途</th></tr></thead><tbody><tr><td style="text-align:left">Shift + F1</td><td style="text-align:right">如果有外部文档可以连接外部文档</td></tr><tr><td style="text-align:left">Shift + F2</td><td style="text-align:right">跳转到上一个高亮错误 或 警告位置</td></tr><tr><td style="text-align:left">Shift + F3</td><td style="text-align:right">在查找模式下，查找匹配上一个</td></tr><tr><td style="text-align:left">Shift + F4</td><td style="text-align:right">对当前打开的文件，使用新Windows窗口打开，旧窗口保留</td></tr><tr><td style="text-align:left">Shift + F6</td><td style="text-align:right">对文件 / 文件夹 重命名</td></tr><tr><td style="text-align:left">Shift + F7</td><td style="text-align:right">在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法</td></tr><tr><td style="text-align:left">Shift + F8</td><td style="text-align:right">在 Debug 模式下，跳出，表现出来的效果跟 F9 一样</td></tr><tr><td style="text-align:left">Shift + F9</td><td style="text-align:right">等效于点击工具栏的 Debug 按钮</td></tr><tr><td style="text-align:left">Shift + F10</td><td style="text-align:right">等效于点击工具栏的 Run 按钮</td></tr><tr><td style="text-align:left">Shift + F11</td><td style="text-align:right">弹出书签显示层</td></tr><tr><td style="text-align:left">Shift + Tab</td><td style="text-align:right">取消缩进</td></tr><tr><td style="text-align:left">Shift + ESC</td><td style="text-align:right">隐藏当前 或 最后一个激活的工具窗口</td></tr><tr><td style="text-align:left">Shift + End</td><td style="text-align:right">选中光标到当前行尾位置</td></tr><tr><td style="text-align:left">Shift + Home</td><td style="text-align:right">选中光标到当前行头位置</td></tr><tr><td style="text-align:left">Shift + Enter</td><td style="text-align:right">开始新一行。光标所在行下空出一行，光标定位到新行位置</td></tr><tr><td style="text-align:left">Shift + 左键单击</td><td style="text-align:right">在打开的文件名上按此快捷键，可以关闭当前打开文件</td></tr><tr><td style="text-align:left">Shift + 滚轮前后滚动</td><td style="text-align:right">当前文件的横向滚动轴滚动</td></tr></tbody></table><h2 id="Ctrl-Alt"><a href="#Ctrl-Alt" class="headerlink" title="Ctrl + Alt"></a>Ctrl + Alt</h2><table><thead><tr><th style="text-align:left">快捷键</th><th style="text-align:right">用途</th></tr></thead><tbody><tr><td style="text-align:left">Ctrl + Alt + L</td><td style="text-align:right">格式化代码，可以对当前文件和整个包目录使用</td></tr><tr><td style="text-align:left">Ctrl + Alt + O</td><td style="text-align:right">优化导入的类，可以对当前文件和整个包目录使用</td></tr><tr><td style="text-align:left">Ctrl + Alt + I</td><td style="text-align:right">光标所在行 或 选中部分进行自动代码缩进，有点类似格式化</td></tr><tr><td style="text-align:left">Ctrl + Alt + T</td><td style="text-align:right">对选中的代码弹出环绕选项弹出层</td></tr><tr><td style="text-align:left">Ctrl + Alt + J</td><td style="text-align:right">弹出模板选择窗口，讲选定的代码加入动态模板中</td></tr><tr><td style="text-align:left">Ctrl + Alt + H</td><td style="text-align:right">调用层次</td></tr><tr><td style="text-align:left">Ctrl + Alt + B</td><td style="text-align:right">在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</td></tr><tr><td style="text-align:left">Ctrl + Alt + V</td><td style="text-align:right">快速引进变量</td></tr><tr><td style="text-align:left">Ctrl + Alt + Y</td><td style="text-align:right">同步、刷新</td></tr><tr><td style="text-align:left">Ctrl + Alt + S</td><td style="text-align:right">打开 IntelliJ IDEA 系统设置</td></tr><tr><td style="text-align:left">Ctrl + Alt + F7</td><td style="text-align:right">显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来</td></tr><tr><td style="text-align:left">Ctrl + Alt + F11</td><td style="text-align:right">切换全屏模式</td></tr><tr><td style="text-align:left">Ctrl + Alt + Enter</td><td style="text-align:right">光标所在行上空出一行，光标定位到新行</td></tr><tr><td style="text-align:left">Ctrl + Alt + Home</td><td style="text-align:right">弹出跟当前文件有关联的文件弹出层</td></tr><tr><td style="text-align:left">Ctrl + Alt + Space</td><td style="text-align:right">类名自动完成</td></tr><tr><td style="text-align:left">Ctrl + Alt + 左方向键</td><td style="text-align:right">退回到上一个操作的地方</td></tr><tr><td style="text-align:left">Ctrl + Alt + 右方向键</td><td style="text-align:right">前进到上一个操作的地方</td></tr><tr><td style="text-align:left">Ctrl + Alt + 上方向键</td><td style="text-align:right">在查找模式下，跳到上个查找的文件</td></tr><tr><td style="text-align:left">Ctrl + Alt + 下方向键</td><td style="text-align:right">在查找模式下，跳到下个查找的文件</td></tr></tbody></table><h2 id="Ctrl-Shift"><a href="#Ctrl-Shift" class="headerlink" title="Ctrl + Shift"></a>Ctrl + Shift</h2><table><thead><tr><th style="text-align:left">快捷键</th><th style="text-align:right">用途</th></tr></thead><tbody><tr><td style="text-align:left">Ctrl + Shift + F</td><td style="text-align:right">根据输入内容查找整个项目 或 指定目录内文件</td></tr><tr><td style="text-align:left">Ctrl + Shift + R</td><td style="text-align:right">根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件</td></tr><tr><td style="text-align:left">Ctrl + Shift + J</td><td style="text-align:right">自动将下一行合并到当前行末尾</td></tr><tr><td style="text-align:left">Ctrl + Shift + Z</td><td style="text-align:right">取消撤销</td></tr><tr><td style="text-align:left">Ctrl + Shift + W</td><td style="text-align:right">递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围</td></tr><tr><td style="text-align:left">Ctrl + Shift + N</td><td style="text-align:right">通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠</td></tr><tr><td style="text-align:left">Ctrl + Shift + U</td><td style="text-align:right">对选中的代码进行大 / 小写轮流转换</td></tr><tr><td style="text-align:left">Ctrl + Shift + T</td><td style="text-align:right">对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择</td></tr><tr><td style="text-align:left">Ctrl + Shift + C</td><td style="text-align:right">复制当前文件磁盘路径到剪贴板</td></tr><tr><td style="text-align:left">Ctrl + Shift + V</td><td style="text-align:right">弹出缓存的最近拷贝的内容管理器弹出层</td></tr><tr><td style="text-align:left">Ctrl + Shift + E</td><td style="text-align:right">显示最近修改的文件列表的弹出层</td></tr><tr><td style="text-align:left">Ctrl + Shift + H</td><td style="text-align:right">显示方法层次结构</td></tr><tr><td style="text-align:left">Ctrl + Shift + B</td><td style="text-align:right">跳转到类型声明处</td></tr><tr><td style="text-align:left">Ctrl + Shift + I</td><td style="text-align:right">快速查看光标所在的方法 或 类的定义</td></tr><tr><td style="text-align:left">Ctrl + Shift + A</td><td style="text-align:right">查找动作 / 设置</td></tr><tr><td style="text-align:left">Ctrl + Shift + /</td><td style="text-align:right">代码块注释</td></tr><tr><td style="text-align:left">Ctrl + Shift + [</td><td style="text-align:right">选中从光标所在位置到它的顶部中括号位置</td></tr><tr><td style="text-align:left">Ctrl + Shift + ]</td><td style="text-align:right">选中从光标所在位置到它的底部中括号位置</td></tr><tr><td style="text-align:left">Ctrl + Shift + +</td><td style="text-align:right">展开所有代码</td></tr><tr><td style="text-align:left">Ctrl + Shift + -</td><td style="text-align:right">折叠所有代码</td></tr><tr><td style="text-align:left">Ctrl + Shift + F7</td><td style="text-align:right">高亮显示所有该选中文本，按Esc高亮消失</td></tr><tr><td style="text-align:left">Ctrl + Shift + F8</td><td style="text-align:right">在 Debug 模式下，指定断点进入条件</td></tr><tr><td style="text-align:left">Ctrl + Shift + F9</td><td style="text-align:right">编译选中的文件 / 包 / Module</td></tr><tr><td style="text-align:left">Ctrl + Shift + F12</td><td style="text-align:right">编辑器最大化</td></tr><tr><td style="text-align:left">Ctrl + Shift + Space</td><td style="text-align:right">智能代码提示</td></tr><tr><td style="text-align:left">Ctrl + Shift + Enter</td><td style="text-align:right">自动结束代码，行末自动添加分号</td></tr><tr><td style="text-align:left">Ctrl + Shift + Backspace</td><td style="text-align:right">退回到上次修改的地方</td></tr><tr><td style="text-align:left">Ctrl + Shift + 1,2,3…9</td><td style="text-align:right">快速添加指定数值的书签</td></tr><tr><td style="text-align:left">Ctrl + Shift + 左方向键</td><td style="text-align:right">在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置，同时选中该单词 / 中文句</td></tr><tr><td style="text-align:left">Ctrl + Shift + 右方向键</td><td style="text-align:right">在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句</td></tr><tr><td style="text-align:left">Ctrl + Shift + 左方向键</td><td style="text-align:right">在光标焦点是在工具选项卡上，缩小选项卡区域</td></tr><tr><td style="text-align:left">Ctrl + Shift + 右方向键</td><td style="text-align:right">在光标焦点是在工具选项卡上，扩大选项卡区域</td></tr><tr><td style="text-align:left">Ctrl + Shift + 上方向键</td><td style="text-align:right">光标放在方法名上，将方法移动到上一个方法前面，调整方法排序</td></tr><tr><td style="text-align:left">Ctrl + Shift + 下方向键</td><td style="text-align:right">光标放在方法名上，将方法移动到下一个方法前面，调整方法排序</td></tr></tbody></table><h2 id="Alt-Shift"><a href="#Alt-Shift" class="headerlink" title="Alt + Shift"></a>Alt + Shift</h2><table><thead><tr><th style="text-align:left">快捷键</th><th style="text-align:right">用途</th></tr></thead><tbody><tr><td style="text-align:left">Alt + Shift + N</td><td style="text-align:right">选择 / 添加 task</td></tr><tr><td style="text-align:left">Alt + Shift + F</td><td style="text-align:right">显示添加到收藏夹弹出层</td></tr><tr><td style="text-align:left">Alt + Shift + C</td><td style="text-align:right">查看最近操作项目的变化情况列表</td></tr><tr><td style="text-align:left">Alt + Shift + F</td><td style="text-align:right">添加到收藏夹</td></tr><tr><td style="text-align:left">Alt + Shift + I</td><td style="text-align:right">查看项目当前文件</td></tr><tr><td style="text-align:left">Alt + Shift + F7</td><td style="text-align:right">在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入</td></tr><tr><td style="text-align:left">Alt + Shift + F9</td><td style="text-align:right">弹出 Debug 的可选择菜单</td></tr><tr><td style="text-align:left">Alt + Shift + F10</td><td style="text-align:right">弹出 Run 的可选择菜单</td></tr><tr><td style="text-align:left">Alt + Shift + 左键双击</td><td style="text-align:right">选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句</td></tr><tr><td style="text-align:left">Alt + Shift + 前方向键</td><td style="text-align:right">移动光标所在行向上移动</td></tr><tr><td style="text-align:left">Alt + Shift + 后方向键</td><td style="text-align:right">移动光标所在行向下移动</td></tr></tbody></table><h2 id="Ctrl-Shift-Alt"><a href="#Ctrl-Shift-Alt" class="headerlink" title="Ctrl + Shift + Alt"></a>Ctrl + Shift + Alt</h2><table><thead><tr><th style="text-align:left">快捷键</th><th style="text-align:right">用途</th></tr></thead><tbody><tr><td style="text-align:left">Ctrl + Shift + Alt + V</td><td style="text-align:right">无格式黏贴</td></tr><tr><td style="text-align:left">Ctrl + Shift + Alt + N</td><td style="text-align:right">前往指定的变量 / 方法</td></tr><tr><td style="text-align:left">Ctrl + Shift + Alt + S</td><td style="text-align:right">打开当前项目设置</td></tr><tr><td style="text-align:left">Ctrl + Shift + Alt + C</td><td style="text-align:right">复制参考信息</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th style="text-align:left">快捷键</th><th style="text-align:right">用途</th></tr></thead><tbody><tr><td style="text-align:left">F2</td><td style="text-align:right">跳转到下一个高亮错误 或 警告位置 （必备）</td></tr><tr><td style="text-align:left">F3</td><td style="text-align:right">在查找模式下，定位到下一个匹配处</td></tr><tr><td style="text-align:left">F4</td><td style="text-align:right">编辑源</td></tr><tr><td style="text-align:left">F7</td><td style="text-align:right">在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td></tr><tr><td style="text-align:left">F8</td><td style="text-align:right">在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td></tr><tr><td style="text-align:left">F9</td><td style="text-align:right">在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上</td></tr><tr><td style="text-align:left">F11</td><td style="text-align:right">添加书签</td></tr><tr><td style="text-align:left">F12</td><td style="text-align:right">回到前一个工具窗口</td></tr><tr><td style="text-align:left">Tab</td><td style="text-align:right">缩进</td></tr><tr><td style="text-align:left">ESC</td><td style="text-align:right">从工具窗口进入代码文件窗口</td></tr><tr><td style="text-align:left">连按两次Shift</td><td style="text-align:right">弹出 Search Everywhere 弹出层</td></tr></tbody></table><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/qq_38963960/article/details/89552704" target="_blank" rel="noopener">https://blog.csdn.net/qq_38963960/article/details/89552704</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近一直再用VS Code进行开发，体积十分轻巧的同时也极大地提升了效率，然而最近学习Spring时，VS Code不能进行XML配置文件的自动补全，譬如\&lt;bean&gt; \&lt;/bean&gt;这一属性，遂改用IDEA进行学习，现记录IDEA的快捷键备用。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java反射</title>
    <link href="https://lingyue9.github.io/2019/04/10/Java%E5%8F%8D%E5%B0%84/"/>
    <id>https://lingyue9.github.io/2019/04/10/Java反射/</id>
    <published>2019-04-10T02:30:24.000Z</published>
    <updated>2020-09-24T05:06:39.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p><a id="more"></a><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>在日常的第三方应用开发过程中，经常会遇到某个类的某个成员变量、方法或是属性是私有的或是只对系统应用开放，这时候就可以利用Java的反射机制通过反射来获取所需的私有成员或是方法。当然，也不是所有的都适合反射，之前就遇到通过反射得到的结果与预期不符。而后阅读源码发现，经过层层调用后在最终返回结果的地方对应用的权限进行了校验，对于没有权限的应用返回值是没有意义的缺省值，否则返回实际值起到保护用户的隐私目的。</p><h2 id="反射机制的相关类"><a href="#反射机制的相关类" class="headerlink" title="反射机制的相关类"></a>反射机制的相关类</h2><p>与Java反射相关的类如下：</p><table><thead><tr><th style="text-align:left">类名</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">Class类</td><td style="text-align:left">代表类的实体，在运行的Java应用程序中表示类和接口</td></tr><tr><td style="text-align:left">Field类</td><td style="text-align:left">代表类的成员变量（类的属性）</td></tr><tr><td style="text-align:left">Method类</td><td style="text-align:left">代表类的方法</td></tr><tr><td style="text-align:left">Constructor类</td><td style="text-align:left">代表类的构造方法</td></tr></tbody></table><h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><p>Class代表类的实体，在运行的Java应用程序中表示类和接口。在这个类中提供了很多有用的方法，这里对他们简单的分类介绍。</p><ul><li>获得类的相关方法</li></ul><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">asSubclass(Class\<u> clazz)</u></td><td style="text-align:left">把传递的类的对象转换成代表其子类的对象</td></tr><tr><td style="text-align:left">Cast</td><td style="text-align:left">把对象转换成代表类或接口的对象</td></tr><tr><td style="text-align:left">getClassLoader()</td><td style="text-align:left">获得类的加载器</td></tr><tr><td style="text-align:left">getClasser()</td><td style="text-align:left">返回一个数组，数组中包含该类中所有公共类和接口类的对象</td></tr><tr><td style="text-align:left">getDeclaredClasses()</td><td style="text-align:left">返回一个数组，数组中包含该类中所有类和接口类的对象</td></tr><tr><td style="text-align:left">forName(String className)</td><td style="text-align:left">根据类名返回类的对象</td></tr><tr><td style="text-align:left">getName()</td><td style="text-align:left">获得类的完整路径名</td></tr><tr><td style="text-align:left">newInstance()</td><td style="text-align:left">创建类的实例</td></tr><tr><td style="text-align:left">getPackage()</td><td style="text-align:left">获得类的包</td></tr><tr><td style="text-align:left">getSimpleName()</td><td style="text-align:left">获得类的名字</td></tr><tr><td style="text-align:left">getSuperclass()</td><td style="text-align:left">获得当前类继承的父类的名字</td></tr><tr><td style="text-align:left">getInterfaces()</td><td style="text-align:left">获得当前类实现的类或接口</td></tr></tbody></table><ul><li>获得类中属性相关的方法</li></ul><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">getField(String name)</td><td style="text-align:left">获得某个公有的属性对象</td></tr><tr><td style="text-align:left">getFields()</td><td style="text-align:left">获得所有公有的属性对象</td></tr><tr><td style="text-align:left">getDeclaredField(String name)</td><td style="text-align:left">获得某个属性对象</td></tr><tr><td style="text-align:left">getDeclaredFields()</td><td style="text-align:left">获得所有属性对象</td></tr></tbody></table><ul><li>获得类中注解相关的方法</li></ul><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">getAnnotation(Class\<a> annotationClass)</a></td><td style="text-align:left">返回该类中与参数类型匹配的公有注解对象</td></tr><tr><td style="text-align:left">getAnnotations()</td><td style="text-align:left">返回该类中所有公有注解对象</td></tr><tr><td style="text-align:left">getDeclaredAnnotation(Class\<a> annotationClass)</a></td><td style="text-align:left">返回该类中与参数类型匹配的所有注解对象</td></tr><tr><td style="text-align:left">getDeclaredAnnotations()</td><td style="text-align:left">返回该类所有注解对象</td></tr></tbody></table><ul><li>获得类中构造器相关的方法</li></ul><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">getConstructor(Class…&lt;?&gt; parameterTypes)</td><td style="text-align:left">获得该类中与参数类型匹配的公有构造方法</td></tr><tr><td style="text-align:left">getConstructors()</td><td style="text-align:left">获得该类的所有公有构造方法</td></tr><tr><td style="text-align:left">getDeclaredConstructor(Class…&lt;?&gt; parameterTypes)</td><td style="text-align:left">获得该类中与参数类型匹配的构造方法</td></tr><tr><td style="text-align:left">getDeclaredConstructors()</td><td style="text-align:left">获得该类所有构造方法</td></tr></tbody></table><ul><li>获得类中方法相关的方法</li></ul><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">getMethod(String name, Class…&lt;?&gt; parameterTypes)</td><td style="text-align:left">获得该类某个公有的方法</td></tr><tr><td style="text-align:left">getMethods()</td><td style="text-align:left">获得该类所有公有的方法</td></tr><tr><td style="text-align:left">getDeclaredMethod(String name, Class…&lt;?&gt; parameterTypes)</td><td style="text-align:left">获得该类某个方法</td></tr><tr><td style="text-align:left">getDeclaredMethods()</td><td style="text-align:left">获得该类所有方法</td></tr></tbody></table><h3 id="Field类"><a href="#Field类" class="headerlink" title="Field类"></a>Field类</h3><p>Field代表类的成员变量（类的属性）。</p><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">eauals(Object obj)</td><td style="text-align:left">属性与obj相等则返回true</td></tr><tr><td style="text-align:left">get(Object obj)</td><td style="text-align:left">获得obj中对应的属性值</td></tr><tr><td style="text-align:left">set(Object obj, Object value)</td><td style="text-align:left">设置obj中对应属性值</td></tr></tbody></table><h3 id="Method类"><a href="#Method类" class="headerlink" title="Method类"></a>Method类</h3><p>Method代表类的方法</p><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">invoke(Object obj, Object… args)</td><td style="text-align:left">传递object对象及参数调用该对象对应的方法</td></tr></tbody></table><h3 id="Constructor类"><a href="#Constructor类" class="headerlink" title="Constructor类"></a>Constructor类</h3><p>Constructor代表类的构造方法</p><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">newInstance(Object… initargs)</td><td style="text-align:left">根据传递的参数创建类的对象</td></tr></tbody></table><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>为了演示反射的使用，首先构造一个与书籍相关的model——Book.java，然后通过反射方法示例创建对象、反射私有构造方法、反射私有属性、反射私有方法，最后给出两个比较复杂的反射示例——获得当前ZenMode和关机Shutdown。</p><ul><li>被反射类Book.java</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">String</span> TAG = <span class="string">"BookTag"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> author;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Book&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", author='"</span> + author + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Book</span><span class="params">(<span class="keyword">String</span> name, <span class="keyword">String</span> author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(<span class="keyword">String</span> author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">String</span> <span class="title">declaredMethod</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">String</span> <span class="built_in">string</span> = null;</span><br><span class="line">        <span class="keyword">switch</span> (index) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">string</span> = <span class="string">"I am declaredMethod 1 !"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">string</span> = <span class="string">"I am declaredMethod 2 !"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">string</span> = <span class="string">"I am declaredMethod 1 !"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>反射逻辑封装在ReflectClass.java</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ReflectClass &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TAG = <span class="string">"peter.log.ReflectClass"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> reflectNewInstance() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">Class</span>&lt;?&gt; classBook = <span class="keyword">Class</span>.forName(<span class="string">"com.android.peter.reflectdemo.Book"</span>);</span><br><span class="line">            Object objectBook = classBook.newInstance();</span><br><span class="line">            Book book = (Book) objectBook;</span><br><span class="line">            book.setName(<span class="string">"Android进阶之光"</span>);</span><br><span class="line">            book.setAuthor(<span class="string">"刘望舒"</span>);</span><br><span class="line">            Log.d(TAG,<span class="string">"reflectNewInstance book = "</span> + book.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射私有的构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> reflectPrivateConstructor() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">Class</span>&lt;?&gt; classBook = <span class="keyword">Class</span>.forName(<span class="string">"com.android.peter.reflectdemo.Book"</span>);</span><br><span class="line">            Constructor&lt;?&gt; declaredConstructorBook = classBook.getDeclaredConstructor(String.<span class="keyword">class</span>,String.<span class="keyword">class</span>);</span><br><span class="line">            declaredConstructorBook.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Object objectBook = declaredConstructorBook.newInstance(<span class="string">"Android开发艺术探索"</span>,<span class="string">"任玉刚"</span>);</span><br><span class="line">            Book book = (Book) objectBook;</span><br><span class="line">            Log.d(TAG,<span class="string">"reflectPrivateConstructor book = "</span> + book.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射私有属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> reflectPrivateField() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">Class</span>&lt;?&gt; classBook = <span class="keyword">Class</span>.forName(<span class="string">"com.android.peter.reflectdemo.Book"</span>);</span><br><span class="line">            Object objectBook = classBook.newInstance();</span><br><span class="line">            Field fieldTag = classBook.getDeclaredField(<span class="string">"TAG"</span>);</span><br><span class="line">            fieldTag.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            String tag = (String) fieldTag.get(objectBook);</span><br><span class="line">            Log.d(TAG,<span class="string">"reflectPrivateField tag = "</span> + tag);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射私有方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> reflectPrivateMethod() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">Class</span>&lt;?&gt; classBook = <span class="keyword">Class</span>.forName(<span class="string">"com.android.peter.reflectdemo.Book"</span>);</span><br><span class="line">            Method methodBook = classBook.getDeclaredMethod(<span class="string">"declaredMethod"</span>,<span class="keyword">int</span>.<span class="keyword">class</span>);</span><br><span class="line">            methodBook.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Object objectBook = classBook.newInstance();</span><br><span class="line">            String string = (String) methodBook.invoke(objectBook,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            Log.d(TAG,<span class="string">"reflectPrivateMethod string = "</span> + string);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得系统Zenmode值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> getZenMode() &#123;</span><br><span class="line">        <span class="keyword">int</span> zenMode = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">Class</span>&lt;?&gt; cServiceManager = <span class="keyword">Class</span>.forName(<span class="string">"android.os.ServiceManager"</span>);</span><br><span class="line">            Method mGetService = cServiceManager.getMethod(<span class="string">"getService"</span>, String.<span class="keyword">class</span>);</span><br><span class="line">            Object oNotificationManagerService = mGetService.invoke(<span class="keyword">null</span>, Context.NOTIFICATION_SERVICE);</span><br><span class="line">            <span class="keyword">Class</span>&lt;?&gt; cINotificationManagerStub = <span class="keyword">Class</span>.forName(<span class="string">"android.app.INotificationManager$Stub"</span>);</span><br><span class="line">            Method mAsInterface = cINotificationManagerStub.getMethod(<span class="string">"asInterface"</span>,IBinder.<span class="keyword">class</span>);</span><br><span class="line">            Object oINotificationManager = mAsInterface.invoke(<span class="keyword">null</span>,oNotificationManagerService);</span><br><span class="line">            Method mGetZenMode = cINotificationManagerStub.getMethod(<span class="string">"getZenMode"</span>);</span><br><span class="line">            zenMode = (<span class="keyword">int</span>) mGetZenMode.invoke(oINotificationManager);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> zenMode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭手机</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> shutDown() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">Class</span>&lt;?&gt; cServiceManager = <span class="keyword">Class</span>.forName(<span class="string">"android.os.ServiceManager"</span>);</span><br><span class="line">            Method mGetService = cServiceManager.getMethod(<span class="string">"getService"</span>,String.<span class="keyword">class</span>);</span><br><span class="line">            Object oPowerManagerService = mGetService.invoke(<span class="keyword">null</span>,Context.POWER_SERVICE);</span><br><span class="line">            <span class="keyword">Class</span>&lt;?&gt; cIPowerManagerStub = <span class="keyword">Class</span>.forName(<span class="string">"android.os.IPowerManager$Stub"</span>);</span><br><span class="line">            Method mShutdown = cIPowerManagerStub.getMethod(<span class="string">"shutdown"</span>,<span class="keyword">boolean</span>.<span class="keyword">class</span>,String.<span class="keyword">class</span>,<span class="keyword">boolean</span>.<span class="keyword">class</span>);</span><br><span class="line">            Method mAsInterface = cIPowerManagerStub.getMethod(<span class="string">"asInterface"</span>,IBinder.<span class="keyword">class</span>);</span><br><span class="line">            Object oIPowerManager = mAsInterface.invoke(<span class="keyword">null</span>,oPowerManagerService);</span><br><span class="line">            mShutdown.invoke(oIPowerManager,<span class="keyword">true</span>,<span class="keyword">null</span>,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> shutdownOrReboot(<span class="keyword">final</span> <span class="keyword">boolean</span> shutdown, <span class="keyword">final</span> <span class="keyword">boolean</span> confirm) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">Class</span>&lt;?&gt; ServiceManager = <span class="keyword">Class</span>.forName(<span class="string">"android.os.ServiceManager"</span>);</span><br><span class="line">            <span class="comment">// 获得ServiceManager的getService方法</span></span><br><span class="line">            Method getService = ServiceManager.getMethod(<span class="string">"getService"</span>, java.lang.String.<span class="keyword">class</span>);</span><br><span class="line">            <span class="comment">// 调用getService获取RemoteService</span></span><br><span class="line">            Object oRemoteService = getService.invoke(<span class="keyword">null</span>, Context.POWER_SERVICE);</span><br><span class="line">            <span class="comment">// 获得IPowerManager.Stub类</span></span><br><span class="line">            <span class="keyword">Class</span>&lt;?&gt; cStub = <span class="keyword">Class</span>.forName(<span class="string">"android.os.IPowerManager$Stub"</span>);</span><br><span class="line">            <span class="comment">// 获得asInterface方法</span></span><br><span class="line">            Method asInterface = cStub.getMethod(<span class="string">"asInterface"</span>, android.os.IBinder.<span class="keyword">class</span>);</span><br><span class="line">            <span class="comment">// 调用asInterface方法获取IPowerManager对象</span></span><br><span class="line">            Object oIPowerManager = asInterface.invoke(<span class="keyword">null</span>, oRemoteService);</span><br><span class="line">            <span class="keyword">if</span> (shutdown) &#123;</span><br><span class="line">                <span class="comment">// 获得shutdown()方法</span></span><br><span class="line">                Method shutdownMethod = oIPowerManager.getClass().getMethod(</span><br><span class="line">                        <span class="string">"shutdown"</span>, <span class="keyword">boolean</span>.<span class="keyword">class</span>, String.<span class="keyword">class</span>, <span class="keyword">boolean</span>.<span class="keyword">class</span>);</span><br><span class="line">                <span class="comment">// 调用shutdown()方法</span></span><br><span class="line">                shutdownMethod.invoke(oIPowerManager, confirm, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 获得reboot()方法</span></span><br><span class="line">                Method rebootMethod = oIPowerManager.getClass().getMethod(<span class="string">"reboot"</span>,</span><br><span class="line">                        <span class="keyword">boolean</span>.<span class="keyword">class</span>, String.<span class="keyword">class</span>, <span class="keyword">boolean</span>.<span class="keyword">class</span>);</span><br><span class="line">                <span class="comment">// 调用reboot()方法</span></span><br><span class="line">                rebootMethod.invoke(oIPowerManager, confirm, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用相应反射逻辑方法</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">try</span> &#123;</span><br><span class="line">    <span class="comment">// 创建对象</span></span><br><span class="line">    <span class="selector-tag">ReflectClass</span><span class="selector-class">.reflectNewInstance</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射私有的构造方法</span></span><br><span class="line">    <span class="selector-tag">ReflectClass</span><span class="selector-class">.reflectPrivateConstructor</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射私有属性</span></span><br><span class="line">    <span class="selector-tag">ReflectClass</span><span class="selector-class">.reflectPrivateField</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射私有方法</span></span><br><span class="line">    <span class="selector-tag">ReflectClass</span><span class="selector-class">.reflectPrivateMethod</span>();</span><br><span class="line">&#125; <span class="selector-tag">catch</span> (Exception ex) &#123;</span><br><span class="line">    <span class="selector-tag">ex</span><span class="selector-class">.printStackTrace</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">Log</span><span class="selector-class">.d</span>(TAG,<span class="string">" zenmode = "</span> + ReflectClass.getZenMode());</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文列举了反射机制使用过程中常用的、重要的一些类及其方法，更多信息和用法需要近一步的阅读Google提供的相关文档和示例。</p><p>在阅读Class类文档时发现一个特点，以通过反射获得Method对象为例，一般会提供四种方法，getMethod(parameterTypes)、getMethods()、getDeclaredMethod(parameterTypes)和getDeclaredMethods()。getMethod(parameterTypes)用来获取某个公有的方法的对象，getMethods()获得该类所有公有的方法，getDeclaredMethod(parameterTypes)获得该类某个方法，getDeclaredMethods()获得该类所有方法。带有Declared修饰的方法可以反射到私有的方法，没有Declared修饰的只能用来反射公有的方法。其他的Annotation、Field、Constructor也是如此。</p><p>在ReflectClass类中还提供了两种反射PowerManager.shutdown()的方法，在调用的时候会输出如下log，提示没有相关权限。之前在项目中尝试反射其他方法的时候还遇到过有权限和没权限返回的值不一样的情况。如果源码中明确进行了权限验证，而你的应用又无法获得这个权限的话，建议就不要反射了。</p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>《Java核心技术》<br><a href="https://www.jianshu.com/p/9be58ee20dee" target="_blank" rel="noopener">Java高级特性——反射</a><br><a href="http://blog.qiji.tech/archives/4374" target="_blank" rel="noopener">认识反射机制（Reflection）</a><br><a href="https://www.cnblogs.com/mengdd/archive/2013/01/26/2877972.html" target="_blank" rel="noopener">Java 反射机制</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="https://lingyue9.github.io/2019/03/21/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <id>https://lingyue9.github.io/2019/03/21/我的第一篇博客文章/</id>
    <published>2019-03-21T02:30:24.000Z</published>
    <updated>2020-09-24T05:06:46.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="制作自己的博客"><a href="#制作自己的博客" class="headerlink" title="制作自己的博客"></a>制作自己的博客</h2><p>使用hexo制作了自己的个人博客，感谢CodeSheep的指导，了解了使用了node.js下使用hexo搭建博客的方法。</p><a id="more"></a><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="www.codesheep.cn">CodeSheep · 程序羊</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;制作自己的博客&quot;&gt;&lt;a href=&quot;#制作自己的博客&quot; class=&quot;headerlink&quot; title=&quot;制作自己的博客&quot;&gt;&lt;/a&gt;制作自己的博客&lt;/h2&gt;&lt;p&gt;使用hexo制作了自己的个人博客，感谢CodeSheep的指导，了解了使用了node.js下使用hexo搭建博客的方法。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
